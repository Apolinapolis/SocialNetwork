{"version":3,"file":"static/js/944.7a3e18a5.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://my-app/./src/components/Profile/MyPosts/myPosts.module.css?9933","components/Profile/MyPosts/myPosts.jsx","components/Profile/MyPosts/myPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusF.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import s from './Post.module.css';\n\n\nconst Post = (props) => {\n    return <div className={s.item}>\n        <img src=\"https://android-obzor.com/wp-content/uploads/2022/03/28e4ac42f547e6ac0f50f7cfa916ca93.jpg\" alt=\"ops!\" />\n        {props.message}\n        <div><button id='likesBtn'>LIKE</button><span>{'  '+ props.likesCount + ' Likes'}</span></div>\n    </div>\n}\n\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"myPosts_postsBlock__RhOud\",\"posts\":\"myPosts_posts__OTqaL\"};","import React from 'react'\nimport Post from './Post/Post'\nimport s from './myPosts.module.css'\nimport { Textarea } from '../../common/FormControls'\nimport { Field, reduxForm } from \"redux-form\"\nimport { required, maxLengthCreator } from '../../../utilits/validators/validators'\n\nconst MyPosts = props => {\n    let postsElements = [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\n    let onAddPost = (values) => props.addPost(values.myPostText)\n    let maxlength10 = maxLengthCreator(10) \n\n    const AddNewPostForm = (props) => {\n        return <form onSubmit={props.handleSubmit} >\n        <div><Field name = 'myPostText' component = {Textarea} validate = {[required , maxlength10]} placeholder = \"cool\" /></div>\n        <div><button> Add Post </button><button> Post remove </button></div>\n        </form>\n    }\n\n    const ReactPostsTextArea = reduxForm({ form: \"profileAddNewPostForm\" })(AddNewPostForm)\n\n    return <div className={s.postsBlock}>\n        <h3>My Super Posts</h3>\n       <ReactPostsTextArea onSubmit={onAddPost}/>\n        <div className={s.posts}>\n            {postsElements}\n        </div>\n    </div>\n}\n\nexport default MyPosts","import { addPostActionCreator } from '../../Redux/profileReducer'\nimport MyPosts from './myPosts'\nimport { connect } from 'react-redux'\n\nlet mapStateToProps = (state) => {return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n}}\nlet mapDispatchToProps = (dispatch) => {return {addPost:(myPostText) => dispatch(addPostActionCreator(myPostText))} }\n\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\nexport default MyPostsContainer","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__u7GZ5\",\"contacts\":\"ProfileInfo_contacts__hKq1Z\",\"formSummaryError\":\"ProfileInfo_formSummaryError__YIVIc\"};","import React, { useEffect, useState } from 'react'\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n    useEffect( () => {setStatus(props.status)}, [props.status] )\n    let activateEditmode = () => { setEditMode(true) }\n    let deactivateEditmode = () => { setEditMode(false); props.updateStatus(status)}\n    const onStatusChange = (e) => {setStatus(e.currentTarget.value)}\n    return <div>{\n            !editMode\n            && <div><b>Status:</b><span onDoubleClick={activateEditmode}>{props.status + \"...\"}</span></div>}\n            {editMode\n            && <div><input onChange={onStatusChange} value={status}\n            autoFocus={true} onBlur={deactivateEditmode} /></div>}</div> \n}\n\nexport default ProfileStatusWithHooks","import {сreateField, Input, Textarea} from \"../../common/FormControls\"\nimport { reduxForm } from \"redux-form\"\nimport s from './ProfileInfo.module.css'\n\nconst ProfileForm = ({handleSubmit, profile , error}) => { \n   return <form onSubmit={handleSubmit}>\n   <div><button><i>Save</i></button></div>\n   {error && <div className={s.formSummaryError}>{error}</div>}\n   <div><b>Full name</b>: {сreateField(\"fullName\", \"fullName\", [], Input)}</div>\n   <div><b>looking for a job</b>: { сreateField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}) }</div>\n   <div><b>My skills</b>: {сreateField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}</div>\n   <div><b>About me</b>: {сreateField(\"About me\", \"AboutMe\", [], Textarea)}</div>\n  <div>\n       <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n         return <div key={key} className={s.contacts}>\n            <b>{key}: {сreateField(key, \"contacts.\" + key, [], Input)}</b>\n         </div>\n       })}</div>\n   </form>\n}  \n\nconst ProfileFormReduxForm = reduxForm({ form: \"edit-profile\" })(ProfileForm)\nexport default ProfileFormReduxForm","import Preloader from '../../common/preloader'\nimport s from './ProfileInfo.module.css'\nimport React, { useState } from 'react'\nimport ProfileStatusWithHooks from './ProfileStatusF'\nimport ph from \"../../../assets/images/tetatet.jpeg\"\nimport ProfileForm from \"./ProfileDataForm\"\n\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false)\n\n    if (!profile) return <Preloader/>\n\n    const uploadPhoto = (e) => {\n    if (e.target.files.length) {\n    savePhoto(e.target.files[0])\n    } }\n\n    const onSubmit = (formdata) => { \n        saveProfile(formdata).then( () => { setEditMode(false)} )\n        }\n    \n\n   return  <div>\n    <div><img src=\"https://images.wallpaperscraft.ru/image/single/listia_rastenie_makro_208778_1920x1080.jpg\" alt='xxx'></img></div>\n    <div className={s.description}>\n        <img src={profile.photos.large || ph } alt=\"ProfileInfo\" />\n        {isOwner && <input type={\"file\"} onChange={uploadPhoto} />}\n    \n        {editMode \n        ? <ProfileForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> \n        : <ProfileData profile={profile} \n            isOwner={isOwner} \n            goToEditMode={ () => {setEditMode(true)} } />\n        }\n\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n        </div></div>\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => { return <div>\n    {isOwner && <div><button onClick={goToEditMode}><i>Edit Mode</i></button></div>} \n    <div><b>Full name</b>: {profile.fullName}</div>\n    <div><b>looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\n    <div><b>My skills</b>: {profile.lookingForAJobDescription}</div>\n    <div><b>About me</b>: {profile.aboutMe}</div>\n    <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n       return <Contacs key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n    })}</div></div>\n}\n\n\nconst Contacs = ({contactTitle, contactValue}) => {\n    return <div className={s.contacts}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo","import MyPostsContainer from './MyPosts/myPostsContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\n\nconst Profile = (props) => {\n    return <div>\n        <ProfileInfo savePhoto={props.savePhoto} \n        profile={props.profile} \n        status={props.status} \n        updateStatus={props.updateStatus} \n        saveProfile={props.saveProfile}\n        isOwner={props.isOwner}/>\n        <MyPostsContainer/>\n    </div>\n}\n\nexport default Profile","import React, { useEffect } from \"react\";\nimport Profile from './Profile'\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../Redux/profileReducer\"\nimport { connect } from \"react-redux\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.router.params.userId\n        //let userId = this.props.profile.userId;\n        if (!userId) { userId = this.props.autorizedUserId }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n     };\n\n    componentDidMount() {\n    this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n       if(this.props.router.params.userId != prevProps.router.params.userId)\n        this.refreshProfile()\n    }\n\n    render() { return <Profile \n        {...this.props}\n        isOwner={!this.props.router.params.userId} \n        profile={this.props.profile} \n        status={this.props.status} \n        updateStatus={this.props.updateStatus} \n        savePhoto={this.props.savePhoto} /> }\n}\n\nfunction withRouter(Component) { // old\n    function ComponentWithRouterProp(props) {\n        let location = useLocation();\n        let navigate = useNavigate();\n        let params = useParams();\n        useEffect(() => {\n            if (!props.isAuth) {\n              navigate(\"/Profile\");\n            }\n          }, [props.isAuth, navigate]);\n        return (\n            <Component\n                {...props}\n                router={{ location, navigate, params }}\n            />\n        );\n    }\n\n    return ComponentWithRouterProp;\n}\n\nlet mapStateToProps = (state) => {\n   return ({ \n    profile: state.profilePage.profile, \n    status: state.profilePage.status,\n    autorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n})}\n\nexport default compose(connect(mapStateToProps, {saveProfile, getUserProfile, getStatus, updateStatus, savePhoto}), withRouter) (ProfileContainer)\n"],"names":["props","_jsxs","className","s","children","_jsx","src","alt","message","id","likesCount","postsElements","posts","reverse","map","p","Post","maxlength10","maxLengthCreator","ReactPostsTextArea","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","values","addPost","myPostText","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","onDoubleClick","activateEditmode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditmode","updateStatus","_ref","profile","error","сreateField","Input","type","Object","keys","contacts","key","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contacs","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","photos","large","ph","target","files","length","ProfileForm","initialValues","formdata","then","ProfileStatusWithHooks","ProfileInfo","MyPostsContainer","ProfileContainer","React","refreshProfile","userId","this","router","params","autorizedUserId","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}